// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package demo

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Sid
//  - Sname
//  - Ssex
//  - Sage
type Student struct {
	Sid   int32  `thrift:"sid,1" json:"sid"`
	Sname string `thrift:"sname,2" json:"sname"`
	Ssex  bool   `thrift:"ssex,3" json:"ssex"`
	Sage  int16  `thrift:"sage,4" json:"sage"`
}

func NewStudent() *Student {
	return &Student{}
}

func (p *Student) GetSid() int32 {
	return p.Sid
}

func (p *Student) GetSname() string {
	return p.Sname
}

func (p *Student) GetSsex() bool {
	return p.Ssex
}

func (p *Student) GetSage() int16 {
	return p.Sage
}
func (p *Student) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Student) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Sid = v
	}
	return nil
}

func (p *Student) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sname = v
	}
	return nil
}

func (p *Student) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Ssex = v
	}
	return nil
}

func (p *Student) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sage = v
	}
	return nil
}

func (p *Student) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Student"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Student) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sid", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Sid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err)
	}
	return err
}

func (p *Student) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sname: ", p), err)
	}
	return err
}

func (p *Student) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ssex", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssex: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Ssex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ssex (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssex: ", p), err)
	}
	return err
}

func (p *Student) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sage", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sage: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Sage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sage (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sage: ", p), err)
	}
	return err
}

func (p *Student) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Student(%+v)", *p)
}

// Attributes:
//  - Isbool
//  - Str
//  - Ti8
//  - Ti16
//  - Ti32
//  - Ti64
//  - Tbl
//  - Lstr
//  - Mp
//  - Bs
type Ttest struct {
	Isbool bool    `thrift:"isbool,1" json:"isbool"`
	Str    string  `thrift:"str,2" json:"str"`
	Ti8    int8    `thrift:"ti8,3" json:"ti8"`
	Ti16   int16   `thrift:"ti16,4" json:"ti16"`
	Ti32   int32   `thrift:"ti32,5" json:"ti32"`
	Ti64   int64   `thrift:"ti64,6" json:"ti64"`
	Tbl    float64 `thrift:"tbl,7" json:"tbl"`
	// unused field # 8
	Lstr []string       `thrift:"lstr,9" json:"lstr"`
	Mp   map[int32]bool `thrift:"mp,10" json:"mp"`
	Bs   []int8         `thrift:"bs,11" json:"bs"`
}

func NewTtest() *Ttest {
	return &Ttest{}
}

func (p *Ttest) GetIsbool() bool {
	return p.Isbool
}

func (p *Ttest) GetStr() string {
	return p.Str
}

func (p *Ttest) GetTi8() int8 {
	return p.Ti8
}

func (p *Ttest) GetTi16() int16 {
	return p.Ti16
}

func (p *Ttest) GetTi32() int32 {
	return p.Ti32
}

func (p *Ttest) GetTi64() int64 {
	return p.Ti64
}

func (p *Ttest) GetTbl() float64 {
	return p.Tbl
}

func (p *Ttest) GetLstr() []string {
	return p.Lstr
}

func (p *Ttest) GetMp() map[int32]bool {
	return p.Mp
}

func (p *Ttest) GetBs() []int8 {
	return p.Bs
}
func (p *Ttest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Ttest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Isbool = v
	}
	return nil
}

func (p *Ttest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Str = v
	}
	return nil
}

func (p *Ttest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Ti8 = temp
	}
	return nil
}

func (p *Ttest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Ti16 = v
	}
	return nil
}

func (p *Ttest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Ti32 = v
	}
	return nil
}

func (p *Ttest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Ti64 = v
	}
	return nil
}

func (p *Ttest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Tbl = v
	}
	return nil
}

func (p *Ttest) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Lstr = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Lstr = append(p.Lstr, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Ttest) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]bool, size)
	p.Mp = tMap
	for i := 0; i < size; i++ {
		var _key1 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key1 = v
		}
		var _val2 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.Mp[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Ttest) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int8, 0, size)
	p.Bs = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_elem3 = temp
		}
		p.Bs = append(p.Bs, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Ttest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ttest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Ttest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isbool", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:isbool: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Isbool)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isbool (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:isbool: ", p), err)
	}
	return err
}

func (p *Ttest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("str", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:str: ", p), err)
	}
	if err := oprot.WriteString(string(p.Str)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.str (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:str: ", p), err)
	}
	return err
}

func (p *Ttest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti8", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ti8: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Ti8)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ti8 (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ti8: ", p), err)
	}
	return err
}

func (p *Ttest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti16", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ti16: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Ti16)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ti16 (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ti16: ", p), err)
	}
	return err
}

func (p *Ttest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti32", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ti32: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Ti32)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ti32 (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ti32: ", p), err)
	}
	return err
}

func (p *Ttest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti64", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ti64: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ti64)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ti64 (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ti64: ", p), err)
	}
	return err
}

func (p *Ttest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tbl: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Tbl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tbl: ", p), err)
	}
	return err
}

func (p *Ttest) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lstr", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lstr: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Lstr)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Lstr {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lstr: ", p), err)
	}
	return err
}

func (p *Ttest) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mp", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:mp: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.BOOL, len(p.Mp)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Mp {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:mp: ", p), err)
	}
	return err
}

func (p *Ttest) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bs", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:bs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BYTE, len(p.Bs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Bs {
		if err := oprot.WriteByte(int8(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:bs: ", p), err)
	}
	return err
}

func (p *Ttest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ttest(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
//  - Extra
type SError struct {
	Code    string            `thrift:"code,1" json:"code"`
	Message string            `thrift:"message,2" json:"message"`
	Extra   map[string]string `thrift:"extra,3" json:"extra"`
}

func NewSError() *SError {
	return &SError{}
}

func (p *SError) GetCode() string {
	return p.Code
}

func (p *SError) GetMessage() string {
	return p.Message
}

func (p *SError) GetExtra() map[string]string {
	return p.Extra
}
func (p *SError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *SError) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SError) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.Extra[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *SError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *SError) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err)
	}
	return err
}

func (p *SError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SError(%+v)", *p)
}

func (p *SError) Error() string {
	return p.String()
}
