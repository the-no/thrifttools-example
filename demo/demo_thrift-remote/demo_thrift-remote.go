// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"demo"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "   CallBack(i64 callTime, string name,  paramMap)")
	fmt.Fprintln(os.Stderr, "  void Put(Student s)")
	fmt.Fprintln(os.Stderr, "  void Set(i64 test)")
	fmt.Fprintln(os.Stderr, "  string GetM()")
	fmt.Fprintln(os.Stderr, "  Ttest TestSet(Ttest tst,  mp,  lt)")
	fmt.Fprintln(os.Stderr, "  bool TestBool(bool b)")
	fmt.Fprintln(os.Stderr, "  byte TestByte(byte b)")
	fmt.Fprintln(os.Stderr, "  i16 TestI16(i16 i)")
	fmt.Fprintln(os.Stderr, "  i32 TestI32(i32 i)")
	fmt.Fprintln(os.Stderr, "  i64 TestI64(i64 i)")
	fmt.Fprintln(os.Stderr, "  double TestDouble(double d)")
	fmt.Fprintln(os.Stderr, "  string TestString(string str)")
	fmt.Fprintln(os.Stderr, "   TestListD( ds)")
	fmt.Fprintln(os.Stderr, "   TestListS( ss)")
	fmt.Fprintln(os.Stderr, "   TestListSL( ssl)")
	fmt.Fprintln(os.Stderr, "   TestListDL( dsl)")
	fmt.Fprintln(os.Stderr, "  void TestVoid()")
	fmt.Fprintln(os.Stderr, "  void TestVoidError()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := demo.NewDemoThriftClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "CallBack":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CallBack requires 3 args")
			flag.Usage()
		}
		argvalue0, err62 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err62 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg64 := flag.Arg(3)
		mbTrans65 := thrift.NewTMemoryBufferLen(len(arg64))
		defer mbTrans65.Close()
		_, err66 := mbTrans65.WriteString(arg64)
		if err66 != nil {
			Usage()
			return
		}
		factory67 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt68 := factory67.GetProtocol(mbTrans65)
		containerStruct2 := demo.NewDemoThriftCallBackArgs()
		err69 := containerStruct2.ReadField3(jsProt68)
		if err69 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ParamMap
		value2 := argvalue2
		fmt.Print(client.CallBack(value0, value1, value2))
		fmt.Print("\n")
		break
	case "Put":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Put requires 1 args")
			flag.Usage()
		}
		arg70 := flag.Arg(1)
		mbTrans71 := thrift.NewTMemoryBufferLen(len(arg70))
		defer mbTrans71.Close()
		_, err72 := mbTrans71.WriteString(arg70)
		if err72 != nil {
			Usage()
			return
		}
		factory73 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt74 := factory73.GetProtocol(mbTrans71)
		argvalue0 := demo.NewStudent()
		err75 := argvalue0.Read(jsProt74)
		if err75 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Put(value0))
		fmt.Print("\n")
		break
	case "Set":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Set requires 1 args")
			flag.Usage()
		}
		argvalue0, err76 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err76 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Set(value0))
		fmt.Print("\n")
		break
	case "GetM":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetM requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetM())
		fmt.Print("\n")
		break
	case "TestSet":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TestSet requires 3 args")
			flag.Usage()
		}
		arg77 := flag.Arg(1)
		mbTrans78 := thrift.NewTMemoryBufferLen(len(arg77))
		defer mbTrans78.Close()
		_, err79 := mbTrans78.WriteString(arg77)
		if err79 != nil {
			Usage()
			return
		}
		factory80 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt81 := factory80.GetProtocol(mbTrans78)
		argvalue0 := demo.NewTtest()
		err82 := argvalue0.Read(jsProt81)
		if err82 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg83 := flag.Arg(2)
		mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
		defer mbTrans84.Close()
		_, err85 := mbTrans84.WriteString(arg83)
		if err85 != nil {
			Usage()
			return
		}
		factory86 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt87 := factory86.GetProtocol(mbTrans84)
		containerStruct1 := demo.NewDemoThriftTestSetArgs()
		err88 := containerStruct1.ReadField2(jsProt87)
		if err88 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Mp
		value1 := argvalue1
		arg89 := flag.Arg(3)
		mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
		defer mbTrans90.Close()
		_, err91 := mbTrans90.WriteString(arg89)
		if err91 != nil {
			Usage()
			return
		}
		factory92 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt93 := factory92.GetProtocol(mbTrans90)
		containerStruct2 := demo.NewDemoThriftTestSetArgs()
		err94 := containerStruct2.ReadField3(jsProt93)
		if err94 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Lt
		value2 := argvalue2
		fmt.Print(client.TestSet(value0, value1, value2))
		fmt.Print("\n")
		break
	case "TestBool":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestBool requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1) == "true"
		value0 := argvalue0
		fmt.Print(client.TestBool(value0))
		fmt.Print("\n")
		break
	case "TestByte":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestByte requires 1 args")
			flag.Usage()
		}
		tmp0, err96 := (strconv.Atoi(flag.Arg(1)))
		if err96 != nil {
			Usage()
			return
		}
		argvalue0 := byte(tmp0)
		value0 := argvalue0
		fmt.Print(client.TestByte(value0))
		fmt.Print("\n")
		break
	case "TestI16":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestI16 requires 1 args")
			flag.Usage()
		}
		tmp0, err97 := (strconv.Atoi(flag.Arg(1)))
		if err97 != nil {
			Usage()
			return
		}
		argvalue0 := byte(tmp0)
		value0 := argvalue0
		fmt.Print(client.TestI16(value0))
		fmt.Print("\n")
		break
	case "TestI32":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestI32 requires 1 args")
			flag.Usage()
		}
		tmp0, err98 := (strconv.Atoi(flag.Arg(1)))
		if err98 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.TestI32(value0))
		fmt.Print("\n")
		break
	case "TestI64":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestI64 requires 1 args")
			flag.Usage()
		}
		argvalue0, err99 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err99 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.TestI64(value0))
		fmt.Print("\n")
		break
	case "TestDouble":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestDouble requires 1 args")
			flag.Usage()
		}
		argvalue0, err100 := (strconv.ParseFloat(flag.Arg(1), 64))
		if err100 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.TestDouble(value0))
		fmt.Print("\n")
		break
	case "TestString":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestString requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.TestString(value0))
		fmt.Print("\n")
		break
	case "TestListD":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestListD requires 1 args")
			flag.Usage()
		}
		arg102 := flag.Arg(1)
		mbTrans103 := thrift.NewTMemoryBufferLen(len(arg102))
		defer mbTrans103.Close()
		_, err104 := mbTrans103.WriteString(arg102)
		if err104 != nil {
			Usage()
			return
		}
		factory105 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt106 := factory105.GetProtocol(mbTrans103)
		containerStruct0 := demo.NewDemoThriftTestListDArgs()
		err107 := containerStruct0.ReadField1(jsProt106)
		if err107 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ds
		value0 := argvalue0
		fmt.Print(client.TestListD(value0))
		fmt.Print("\n")
		break
	case "TestListS":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestListS requires 1 args")
			flag.Usage()
		}
		arg108 := flag.Arg(1)
		mbTrans109 := thrift.NewTMemoryBufferLen(len(arg108))
		defer mbTrans109.Close()
		_, err110 := mbTrans109.WriteString(arg108)
		if err110 != nil {
			Usage()
			return
		}
		factory111 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt112 := factory111.GetProtocol(mbTrans109)
		containerStruct0 := demo.NewDemoThriftTestListSArgs()
		err113 := containerStruct0.ReadField1(jsProt112)
		if err113 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ss
		value0 := argvalue0
		fmt.Print(client.TestListS(value0))
		fmt.Print("\n")
		break
	case "TestListSL":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestListSL requires 1 args")
			flag.Usage()
		}
		arg114 := flag.Arg(1)
		mbTrans115 := thrift.NewTMemoryBufferLen(len(arg114))
		defer mbTrans115.Close()
		_, err116 := mbTrans115.WriteString(arg114)
		if err116 != nil {
			Usage()
			return
		}
		factory117 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt118 := factory117.GetProtocol(mbTrans115)
		containerStruct0 := demo.NewDemoThriftTestListSLArgs()
		err119 := containerStruct0.ReadField1(jsProt118)
		if err119 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ssl
		value0 := argvalue0
		fmt.Print(client.TestListSL(value0))
		fmt.Print("\n")
		break
	case "TestListDL":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TestListDL requires 1 args")
			flag.Usage()
		}
		arg120 := flag.Arg(1)
		mbTrans121 := thrift.NewTMemoryBufferLen(len(arg120))
		defer mbTrans121.Close()
		_, err122 := mbTrans121.WriteString(arg120)
		if err122 != nil {
			Usage()
			return
		}
		factory123 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt124 := factory123.GetProtocol(mbTrans121)
		containerStruct0 := demo.NewDemoThriftTestListDLArgs()
		err125 := containerStruct0.ReadField1(jsProt124)
		if err125 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Dsl
		value0 := argvalue0
		fmt.Print(client.TestListDL(value0))
		fmt.Print("\n")
		break
	case "TestVoid":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "TestVoid requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.TestVoid())
		fmt.Print("\n")
		break
	case "TestVoidError":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "TestVoidError requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.TestVoidError())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
